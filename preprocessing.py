# Load Packages
import pandas as pd
import numpy as np
import pickle
import rdkit.Chem as Chem
from rdkit.Chem import AllChem
from tqdm import tqdm
import os
import yaml

def msp2df(file, write_to_csv=False):
    """Convert NIST exported MSP file to pandas DataFrame
    
    Parameters
    ----------
    file : str
        The file location of the exported .MSP file
        
    write_to_csv: boolen
        Whether to create a .csv file at the file location. Default is False.
        
    Returns
    -------
    DataFrame
        A DataFrame containing all the data in the MSP file
    """
    print('Convert MSP file to DataFrame ==================')
    with open(file) as f:
        raw_data_lines = f.readlines()
    raw_data_list = []
    raw_data_item = {}
    read_ms = False
    for raw_l in tqdm(raw_data_lines):
        raw_l = raw_l.replace('\n', '')
        if raw_l == '':
            raw_data_list.append(raw_data_item.copy())
            raw_data_item = {}
            read_ms = False
        elif read_ms:
            raw_data_item['ms'] = raw_data_item['ms'] + raw_l + '\n'
        else:
            if 'Num peaks: ' in raw_l:
                raw_l_split = raw_l.split(': ')
                raw_data_item[raw_l_split[0]] = int(raw_l_split[1])
                raw_data_item['ms'] = ''
                read_ms = True
            else:
                raw_l_split = raw_l.split(': ')
                if raw_l_split[0] in ['ID', 'CASNO', 'NISTNO', 'MW']:
                    raw_data_item[raw_l_split[0]] = int(raw_l_split[1])
                elif raw_l_split[0] in ['ExactMass']:
                    raw_data_item[raw_l_split[0]] = float(raw_l_split[1])
                else:
                    raw_data_item[raw_l_split[0]] = raw_l_split[1]
    
    dt = pd.DataFrame(raw_data_list)
    if write_to_csv:
        dt.to_csv(file.replace("MSP", "csv"))
    return dt

def get_testable(test_cand_file, all_inchikey, mol_dict):
    """Given all inchikeys and a test candidate file, compute all testable mols
    
    This function is designed to work on the 'formula_inchilist_dic.pkl' file
    
    Parameters
    ----------
    test_cand_file : str
        The file location of the test candidate file
    
    all_inchikey : List
        List of all InChIKeys
    
    mol_dict : Dictionary
        Python dictionary for molecules with InChIKey as dict keys
    """
    with open(test_cand_file, 'rb') as f:
        cand_dict = pickle.load(f)
    
    all_inchi = []
    all_formula = []
    testable = []
    test_dict = {}
    for ik in tqdm(all_inchikey):
        m = mol_dict[ik]
        inchi = Chem.inchi.MolToInchi(m, options='-SNon')
        f = Chem.rdMolDescriptors.CalcMolFormula(m)
        all_inchi.append(inchi)
        all_formula.append(f)
        if f in cand_dict.keys():
            if inchi in cand_dict[f]:
                testable.append(True)
                test_dict[ik] = cand_dict[f]
            else:
                testable.append(False)
        else:
            testable.append(False)
    molecules_dt = pd.DataFrame({
        'InChIKey': all_inchikey,
        'InChI': all_inchi,
        'Formula': all_formula,
        'testable': testable
    })
    return molecules_dt, test_dict

def preprocess_data(
  dt, mol_dir, pos_prec, neg_prec, element_list, test_inchikeys, sample_size
):  
    """Preprocess the NIST DataFrame and separate data into pos/neg, train/test. 
    
    Parameters
    ----------
    dt : DataFrame
        A DataFrame containing NIST data (assuming generated by `msp2df`)
    
    mol_dir : str
        Location of the MOL file directory
        
    pos_prec : list
        List of allowed positive precursors
        
    neg_prec : list
        List of allowed negative precursors
        
    element_list : list
        List of allowed chemical element
        
    sample_size : int
        How many spectrums per molecule will be sampled from the data
    """
    # Focus on MSMS, HCD and selected precursor types (we decided to remove rare
    # precursor types)
    print('Preprocess data ==================')
    print('Cleaning up data... (1/4)')
    dt = dt[~dt['InChIKey'].isnull()]
    dt = dt[dt['Spectrum_type'] == 'MS2']
    dt = dt[dt['Instrument_type'] == 'HCD']
    dt = dt[dt['Collision_gas'] == 'N2']
    dt = dt[dt['Precursor_type'].isin(pos_prec + neg_prec)]
    
    ce = dt['Collision_energy'].str.split(' ', n = 1, expand = True)
    dt['NCE'] = ce[0]
    dt['ACE'] = ce[1]
    
    dt['NCE'] = dt['NCE'].str.replace('NCE=', '').str.replace('\\%', '')
    dt['NCE'] = dt['NCE'].astype(np.float) / 100
    dt['ACE'] = dt['ACE'].str.replace('eV', '').astype(np.float)
    
    dt = dt.reset_index()
    
    # Check if mol files are readable 
    # Check if mol contains unallowed element
    print('Making sure MOL files are available... Making sure molecures ' + 
          'contain allowed chemical elements only... (2/4)')
    id_inchikey = dt.groupby('InChIKey').head(1)
    check_filenames = list('ID' + id_inchikey['ID'].astype(str) + '.MOL')
    check_inchikey = list(id_inchikey['InChIKey'])
    check_pass = []
    mol_dict = {}
    
    for ik, f in tqdm(zip(check_inchikey, check_filenames)):
        f_path = os.path.join(mol_dir, f)
        if os.path.exists(f_path):
            m = Chem.MolFromMolFile(f_path)
            if m is None:
                check_pass.append(False)
            else:
                if m.GetNumAtoms() == 0:
                    check_pass.append(False)
                else:
                    check_chonps = [a.GetSymbol() in element_list 
                                    for a in m.GetAtoms()]
                    if all(check_chonps):
                        check_pass.append(True)
                        mol_dict[ik] = m
                    else:
                        check_pass.append(False)
        else:
            check_pass.append(False)
    
    check_dt = pd.DataFrame({'InChIKey': check_inchikey, 
                             'check_pass': check_pass})
    
    dt = pd.merge(dt, check_dt, how='left', on='InChIKey')
    dt = dt[dt['check_pass'] == True].reset_index()
    
    # Mark out test molecules
    dt['test'] = False
    dt.loc[dt['InChIKey'].isin(test_inchikeys), 'test'] = True
    
    # Reduce data size by sampling a fraction of spectrum for training. For 
    # consistency, we select n number of spectrum per molecule.
    if sample_size == 0:
        print('Proceed with full data.')
    else:
        print('Sampling ' + str(sample_size), ' records per molecule. (3/4)')
        dt = dt.groupby('InChIKey').sample(n = sample_size, replace=True)
    
    # Split data into positive/negative, train/test and added sampling
    print('Splitting the data... (4/4)')
    dt_positive = dt[dt.Precursor_type.isin(pos_prec)]
    dt_negative = dt[dt.Precursor_type.isin(neg_prec)]
    
    pos_train = dt_positive[~dt_positive['test']]
    pos_test = dt_positive[dt_positive['test']]
    neg_train = dt_negative[~dt_negative['test']]
    neg_test = dt_negative[dt_negative['test']]
    
    print('Done!')
    return mol_dict, pos_train, pos_test, neg_train, neg_test

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print("Please enter the location where you want to save the " + 
              "processed data and how many spectrum do you want to sample.")
    else:
        pos_prec = ['[M+H]+', '[M+H-H2O]+', '[M+H-2H2O]+', '[M+2H]2+', '[M+H-NH3]+']
        neg_prec = ['[M-H]-', '[M-H-H2O]-']
        element_list = ['H', 'C',  'O', 'N', 'P', 'S', 'Cl']
        save_dir = sys.argv[1]
        sample_size = int(sys.argv[2])
        
        dt = msp2df('data_raw/hr_msms_nist.MSP', write_to_csv=False)
#         dt = pd.read_csv('data_raw/hr_msms_nist.csv', low_memory = False)
        with open('data_raw/test_inchikey.txt', 'r') as f:
            test_inchikeys = f.readlines()
        test_inchikeys = [ik.replace('\n', '') for ik in test_inchikeys]
        
        mol_dict, pos_train, pos_test, neg_train, neg_test = preprocess_data(
            dt, 'data_raw/hr_msms_nist.MOL', 
            pos_prec, neg_prec, element_list, test_inchikeys, sample_size
        )
        
        os.mkdir(save_dir)
        pos_train.to_csv(os.path.join(save_dir, 'pos_train.csv'))
        pos_test.to_csv(os.path.join(save_dir, 'pos_test.csv'))
        neg_train.to_csv(os.path.join(save_dir, 'neg_train.csv'))
        neg_test.to_csv(os.path.join(save_dir, 'neg_test.csv'))
        
        with open(os.path.join(save_dir, 'mol_dict.pkl'), 'wb') as f:
            pickle.dump(mol_dict, f)